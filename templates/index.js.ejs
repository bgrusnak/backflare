import jwt from "jsonwebtoken";
import { routes } from './router.js';

export default {
    async fetch(request, env, ctx) {
        // Attach environment to the request for easy access in handlers
        request.env = env;

        // Session handling
        request.session = {};
        const cookie = request.headers.get('Cookie');
        if (cookie && cookie.includes('__session=')) {
            const token = cookie.split('__session=')[1].split(';')[0];
            try {
                const   payload   = await jwt.verify(token, env.JWT_SECRET);
                // We create a shallow copy to make the session object mutable
                request.session = { ...payload };
            } catch (e) {
                // Invalid JWT, continue with empty session
                console.error('JWT verification failed:', e.message);
            }
        }

        let response;
        try {
            const url = new URL(request.url);
            let handler = null;

            for (const route of routes) {
                if (request.method !== route.method) continue;

                const match = url.pathname.match(route.regex);
                if (match) {
                    request.params = {};
                    route.paramNames.forEach((name, index) => {
                        request.params[name] = match[index + 1];
                    });
                    handler = route.handler;
                    break;
                }
            }

             const contentType = request.headers.get('content-type');
            if (contentType) {
                if (contentType.includes('application/json')) {
                    try { request.requestBody = await request.json(); } catch (e) {}
                } else if (contentType.includes('multipart/form-data')) {
                    try { request.requestBody = await request.formData(); } catch (e) {}
                }
            } 
            if (handler) {
                response = await handler(request);
            } else {
                response = new Response('Not Found.', { status: 404 });
            }

        } catch (err) {
            console.error('Unhandled error:', err);
            response = new Response('Internal Server Error', { status: 500 });
        }

        return response;
    },
};