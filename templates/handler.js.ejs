import { executeQuery } from '../db.js';
import { uploadFile } from '../files.js';
import { getKey, putKey } from '../keys.js';
import { v4 as uuidv4 } from 'uuid';
import jwt from "jsonwebtoken";
import {getValue} from '../utils.js'

export const handler = async (rawRequest) => {
    const context = {...rawRequest, body: rawRequest.requestBody, steps: {}}
    const request = {...rawRequest, body: rawRequest.requestBody};
    const session = context.session;
   <%  let updateSession = false; -%>
    try { 
<% for (const op of operations) { -%>
        <% const opType = Object.keys(op)[0]; -%>
        <% const opConfig = op[opType]; -%> 
        // Operation: <%= opType %> <%= opConfig.name ? `(as ${opConfig.name})` : '' %>
        <% if (opType === 'sql') { -%>
        <% if (opConfig.name) { -%>
context.steps.<%= opConfig.name %> = await executeQuery(context.env.<%= opConfig.database || defaults.d1 %>, <%- JSON.stringify(opConfig.query) %>, [<%- opConfig.bindings %>]);
        <% } else { -%>
await executeQuery(context.env.<%= opConfig.database || defaults.d1 %>, <%- JSON.stringify(opConfig.query) %>, [<%- opConfig.bindings %>]);
        <% } -%>
        <% } else if (opType === 'kv') { -%>
        {
            const kvBinding = context.env['<%= opConfig.namespace || defaults.kv %>'];
            const key = getValue(<%- JSON.stringify(opConfig.key) %>, context);
            <% if ((opConfig.operation || 'get') === 'put') { -%>
            const value = getValue(<%- JSON.stringify(opConfig.value) %>, context);
            const options = getValue(<%- JSON.stringify(opConfig.options || {}) %>, context);
            await putKey(kvBinding, key, value, options);
            <% } else { -%>
            const result = await getKey(kvBinding, key, '<%= opConfig.readType || 'text' %>');
             <% if (opConfig.name) { -%>
                context.steps.<%= opConfig.name %> = result;
            <% } -%>
            <% } -%>
        }
        <% } else if (opType === 'files') { -%>
        {
            const r2Binding = context.env['<%= opConfig.bucket || defaults.r2 %>'];
            if (typeof context.requestBody?.get !== 'function') throw new Error('Request body is not FormData for file upload.');
            const file = context.requestBody.get('<%= opConfig.source || 'file' %>');
            if (!file || typeof file === 'string') throw new Error('File not found in form data.');
            const key = <%- opConfig.key ? `getValue(${JSON.stringify(opConfig.key)}, context)` : `uuidv4() + '-' + file.name` %>;
            const result = await uploadFile(r2Binding, key, file.stream(), { httpMetadata: { contentType: file.type } });
            <% if (opConfig.name) { -%>
                context.steps.<%= opConfig.name %> = { ...result, fullKey: key };
            <% } -%>
        }
        <% } else if (opType === 'session') { updateSession=true; -%> 
            <%   if (opConfig.clear !== undefined) {  -%>
context.session= {};
            <% } else  { -%>
            <%   const keys = Object.keys(opConfig.set); for(const key of keys) {
            -%>
context.session.<%- key %> = context.<%- opConfig.set[key] %>
            <% } -%>
            <% } -%>
                    
        <% } else if (opType === 'request') { -%>
        {
            const url = getValue(<%- JSON.stringify(opConfig.url) %>, context);
            const headers = getValue(<%- JSON.stringify(opConfig.headers || {}) %>, context);
            const options = { method: '<%= (opConfig.method || 'GET').toUpperCase() %>', headers };
            <% if (opConfig.body) { -%>
            options.body = JSON.stringify(getValue(<%- JSON.stringify(opConfig.body) %>, context));
            <% } -%>
            const response = await fetch(url, options);
            const result = { status: response.status, error: response.status >= 400, body: await response.text(), data: null };
            try { result.data = JSON.parse(result.body); } catch (e) {}
            <% if (opConfig.name) { -%>
                context.steps.<%= opConfig.name %> = result;
            <% } -%>
        }
        <% } else if (opType === 'code') { -%>
        {
            const { request, env, session, steps, requestBody } = context;
            const result = await (async (context) => {
                <%- opConfig.js %>
            })();
            <% if (opConfig.name) { -%>
                context.steps.<%= opConfig.name %> = result;
            <% } -%>
        }
        <% } -%>
<% } -%>
<% if (xResponse) { -%>
        const responseBody = getValue(<%- JSON.stringify(xResponse.body) %>, context);
        <% if (xResponse.headers) { -%>
        const headers = getValue(<%- JSON.stringify(xResponse.headers ) %>, context);
<% } else { -%>
    const headers ={};
<% } -%>
 <%   if (updateSession) {  -%>
            if (Object.keys(context.session).length === 0) {
                // Logout: clear the cookie
                headers['Set-Cookie']= `__session=; HttpOnly; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT`;
            } else {
                // Login/update: set the cookie
                const newJwt = jwt.sign(context.session, context.env.JWT_SECRET, context.session.exp ? {}: { expiresIn: "24h" } );
                 headers['Set-Cookie']=  `__session=${newJwt}; HttpOnly; Path=/; SameSite=Strict; Secure`;
            }
        
<% } -%>
        const status = <%- xResponse.status || 200 %>;
        <% if ( typeof responseBody === 'object') { -%>
        const finalBody =  String(responseBody); 
        <% } else { -%>
        const finalBody =  JSON.stringify(responseBody);
<% } -%>
        return new Response(finalBody, { status, headers, session: context.session });
<% } else { -%>
        return new Response(String(Date.now()), { status: 200, headers, session: context.session });
<% } -%>
    } catch (e) {
        console.error('Error in handler:', e.message, e.stack);
        return new Response('Internal Server Error', { status: 500 });
    }
};